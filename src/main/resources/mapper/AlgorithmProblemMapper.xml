<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.honeyboard.api.algorithm.problem.mapper.AlgorithmProblemMapper">

    <resultMap id="AlgorithmProblemWithTags" type="com.honeyboard.api.algorithm.problem.model.response.AlgorithmProblemList">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="url" column="url"/>
        <result property="createdAt" column="created_at"/>
        <collection property="tags" ofType="com.honeyboard.api.algorithm.tag.model.TagResponse">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <!--  Algorithm Problem 전체 조회 + 검색  -->
    <select id="selectAllAlgorithmProblem" resultMap="AlgorithmProblemWithTags">
        SELECT ap.id,
               ap.title,
               ap.url,
               ap.created_at,
               t.id AS tag_id,
               t.name AS tag_name
        FROM algorithm_problem ap
                 LEFT JOIN algorithm_problem_tag apt ON ap.id = apt.algorithm_problem_id
                 LEFT JOIN tag t ON apt.tag_id = t.id
        WHERE ap.is_deleted = false
          AND (
            #{keyword} IS NULL OR
            CASE #{searchType}
                WHEN 'title' THEN ap.title LIKE CONCAT('%', #{keyword}, '%')
                WHEN 'tag' THEN EXISTS (
                    SELECT 1
                    FROM algorithm_problem_tag apt2
                             JOIN tag t2 ON apt2.tag_id = t2.id
                    WHERE apt2.algorithm_problem_id = ap.id
                      AND t2.name LIKE CONCAT('%', #{keyword}, '%')
                )
                END
            )
        ORDER BY ap.created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="countAlgorithmProblem" resultType="int">
        SELECT COUNT(DISTINCT ap.id)
        FROM algorithm_problem ap
                 LEFT JOIN algorithm_problem_tag apt ON ap.id = apt.algorithm_problem_id
                 LEFT JOIN tag t ON apt.tag_id = t.id
        WHERE ap.is_deleted = false
          AND (
            #{keyword} IS NULL OR
            CASE #{searchType}
                WHEN 'title' THEN ap.title LIKE CONCAT('%', #{keyword}, '%')
                WHEN 'tag' THEN EXISTS (
                    SELECT 1
                    FROM algorithm_problem_tag apt2
                             JOIN tag t2 ON apt2.tag_id = t2.id
                    WHERE apt2.algorithm_problem_id = ap.id
                      AND t2.name LIKE CONCAT('%', #{keyword}, '%')
                )
                END
            )
    </select>


    <!--  Algorithm Problem 상세조회  -->
    <select id="selectProblemBasicInfo" resultType="com.honeyboard.api.algorithm.problem.model.response.AlgorithmProblemDetail">
        SELECT id,
               title,
               url
        FROM algorithm_problem
        WHERE id = #{problemId}
    </select>

    <select id="selectProblemSolutions" resultType="com.honeyboard.api.algorithm.problem.model.response.AlgorithmProblemList">
        SELECT s.id,
               s.title,
               s.created_at as subtitle,
               s.memory,
               s.language_id as languageId,
               l.name as languageName,
               s.runtime
        FROM algorithm_problem_solution s
                 LEFT JOIN programming_language l ON s.language_id = l.id
        WHERE s.problem_id = #{problemId}
    </select>

    <select id="selectProblemTags" resultType="com.honeyboard.api.algorithm.tag.model.TagResponse">
        SELECT t.id,
               t.name
        FROM tag t
                 JOIN algorithm_problem_tag apt ON t.id = apt.tag_id
        WHERE apt.algorithm_problem_id = #{problemId}
    </select>


    <!--  Algorithm Problem 작성  -->
    <insert id="insertAlgorithmProblem" useGeneratedKeys="true" keyProperty="createResponse.id">
        INSERT INTO algorithm_problem (title, url, user_id)
        VALUES (#{request.title}, #{request.url}, #{userId})
    </insert>

    <select id="existsByUrl" resultType="int">
        SELECT EXISTS (SELECT 1
                       FROM algorithm_problem
                       WHERE url = #{url}
                         AND is_deleted = false)
    </select>


    <!--  Algorithm Problem 수정  -->
    <update id="updateAlgorithmProblem">
        UPDATE algorithm_problem
        SET title = #{request.title},
            url = #{request.url},
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{problemId}
          AND is_deleted = false
    </update>


    <!--  Algorithm Problem 삭제  -->
    <update id="deleteAlgorithmProblem">
        UPDATE algorithm_problem
        SET is_deleted = true,
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{problemId}
          AND is_deleted = false
    </update>


    <!--  Tag 관리  -->
    <insert id="insertAlgorithmProblemTags">
        INSERT INTO algorithm_problem_tag (algorithm_problem_id, tag_id)
        VALUES
        <foreach collection="tagIds" item="tagId" separator=",">
            (#{problemId}, #{tagId})
        </foreach>
    </insert>


    <select id="getTagIdsByProblemId" resultType="int">
        SELECT tag_id
        FROM algorithm_problem_tag
        WHERE algorithm_problem_id = #{problemId}
    </select>

    <delete id="deleteSpecificAlgorithmProblemTags">
        DELETE FROM algorithm_problem_tag
        WHERE algorithm_problem_id = #{problemId}
        AND tag_id IN
        <foreach collection="tagIds" item="tagId" open="(" separator="," close=")">
            #{tagId}
        </foreach>
    </delete>

</mapper>